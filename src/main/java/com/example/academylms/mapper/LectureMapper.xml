<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.academylms.mapper.LectureMapper">
<select id="findLecturesByInstructor" parameterType="int" resultType="com.example.academylms.dto.Lecture">
    SELECT lecture_id lectureId, title
    FROM lecture
    WHERE instructor_id = #{instructorId}
</select>
<select id="selectLectureById" resultType="com.example.academylms.dto.Lecture" parameterType="int">
    SELECT 
        lecture_id lectureId,
        admin_id adminId,
        instructor_id instructorId,
        title,
        description,
        day,
        time,
        started_at startedAt,
        ended_at endedAt,
        create_date createDate
    FROM lecture
    WHERE lecture_id = #{lectureId}
</select>

<select id="findInstructorInfo"  resultType="com.example.academylms.dto.InstructorInfo">
SELECT u.user_id AS instructorId , i.name as name, i.major AS major FROM user u INNER JOIN instructor i ON u.user_id = i.instructor_id; 
</select>

<select id="findInstructorInfoByinfoId" parameterType="int" resultType="String" >
SELECT i.major AS major FROM user u INNER JOIN instructor i ON u.user_id = i.instructor_id where instructor_id = #{instructorId};
</select>

<insert id="createLecture" parameterType="com.example.academylms.dto.Lecture" useGeneratedKeys="true" keyProperty="lectureId" > 
INSERT INTO lecture  (admin_id, instructor_id, title, DESCRIPTION, DAY, TIME, room,  started_at, ended_at) VALUES (#{adminId},#{instructorId},#{title},#{description},#{day},#{time},#{room},#{startedAt},#{endedAt});
</insert>

<insert id="createLectureWeek">
INSERT INTO lecture_week (lecture_id, week) VALUES(#{lectureId},#{week});
</insert>

<select id="lectureOneBylectureId" resultType="com.example.academylms.dto.Lecture" parameterType="int">
SELECT i.major AS major, i.name AS name , l.title AS title, l.DESCRIPTION AS description, l.DAY AS day, l.TIME AS time, l.room AS room , l.started_at  AS startedAt, l.ended_at AS endedAt , l.instructor_id AS instructorId, l.lecture_id AS lectureId FROM lecture l
INNER JOIN instructor i ON l.instructor_id = i.instructor_id   WHERE lecture_id = #{lectureId};   
</select>

<delete id="deleteLectureWeek" parameterType="int">
Delete From lecture_week where lecture_id = #{lectureId};
</delete>

<update id="updateLecture" parameterType="com.example.academylms.dto.Lecture">
UPDATE lecture SET admin_id = #{adminId}, instructor_id = #{instructorId}, title = #{title}, DESCRIPTION = #{description}, DAY = #{day},  TIME = #{time}, room = #{room}, started_at = #{startedAt}, ended_at = #{endedAt}  WHERE lecture_id = #{lectureId};
</update>

<delete id="deleteLecture" parameterType="int">
Delete From lecture WHERE lecture_id = #{lectureId};
</delete>

<select id="lectureOneWeekList" parameterType="int" resultType="com.example.academylms.dto.LectureWeekMaterial"> 
SELECT 
    lw.week AS week, 
    lw.week_id AS weekId, 
    lm.material_id AS materialId, 
    lm.title AS title, 
    lm.file_url AS fileUrl, 
    lm.create_date AS createDate 
FROM 
    lecture_week lw
LEFT JOIN 
    lecture_material lm ON lw.week_id = lm.week_id
WHERE 
    lw.lecture_id = #{lectureId}
    AND lw.week BETWEEN 1 AND 5
ORDER BY 
    lw.week ASC;

</select>

<select id="lectureOneNoticeList" parameterType="int" resultType="com.example.academylms.dto.Notice">
SELECT 
      notice_id noticeId,
      lecture_id lectureId,
      notice_type noticeType,
      title,
      content,
      create_date createDate
  FROM notice
  WHERE lecture_id = #{lectureId}
  ORDER BY create_date DESC
  LIMIT 5;

</select>

<select id="lectureOneQuizList" parameterType="int" resultType="com.example.academylms.dto.QuizWeekList">
   SELECT 
   	  DISTINCT
      lw.week_id AS weekId,
      lw.week AS week,
      q.started_at AS startedAt,
      q.ended_at AS endedAt
   FROM lecture_week lw
   LEFT JOIN quiz q ON lw.week_id = q.week_id
   WHERE lw.lecture_id = #{lectureId}
     AND lw.week BETWEEN 1 AND 5
   ORDER BY lw.week ASC
</select>

<select id="lectureOneQnaList" parameterType="int" resultType="com.example.academylms.dto.QnaList">
    SELECT q.qna_id AS qnaId,
             q.title,
             q.is_public AS isPublic,
             q.create_date AS createDate,
             u.id AS writerName
    FROM qna q
    JOIN lecture_enrollment le ON q.enrollment_id = le.enrollment_id
    JOIN user u ON le.student_id = u.user_id
    WHERE le.lecture_id = #{lectureId}
   	ORDER BY q.create_date DESC
    LIMIT 5;
</select>

<select id="lectureOneStduyGroupList" parameterType="int" resultType="com.example.academylms.dto.StudyPostList">
     SELECT 
    p.post_id AS postId,
    p.group_id AS groupId,
    p.title AS title,
    p.content AS content,
    p.feedback AS feedback,
    p.create_date AS createDate,
    u.id AS id
	FROM study_post p
	JOIN study_group g ON p.group_id = g.group_id 
	JOIN user u ON g.student_id = u.user_id
	WHERE g.lecture_id = #{lectureId}
	ORDER BY p.create_date DESC
	LIMIT 5;

</select>

<select id="isScheduleConflict" parameterType="com.example.academylms.dto.Lecture">
SELECT COUNT(*) FROM lecture 
WHERE instructor_id = #{instructorId}
	AND TIME = #{time}
	AND (
	<foreach collection="dayList" item="d" separator=" OR ">
	  day LIKE CONCAT('%', #{d} ,'%')
	</foreach>
	)
	AND started_at &lt;= #{endedAt}
	AND ended_at &gt;= #{startedAt}
</select>
</mapper>